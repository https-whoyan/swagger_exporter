// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels(in *jlexer.Lexer, out *SchemaInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Properties = make(map[string]SchemaDetail)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 SchemaDetail
					(v1).UnmarshalEasyJSON(in)
					(out.Properties)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels(out *jwriter.Writer, in SchemaInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		if in.Properties == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Properties {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				(v2Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SchemaInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SchemaInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SchemaInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SchemaInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels(l, v)
}
func easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels1(in *jlexer.Lexer, out *SchemaDetail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				if out.Items == nil {
					out.Items = new(SchemaInfo)
				}
				(*out.Items).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels1(out *jwriter.Writer, in SchemaDetail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Items != nil {
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		(*in.Items).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SchemaDetail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SchemaDetail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SchemaDetail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SchemaDetail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels1(l, v)
}
func easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels2(in *jlexer.Lexer, out *ParamInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "required":
			out.Required = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels2(out *jwriter.Writer, in ParamInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		out.Bool(bool(in.Required))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels2(l, v)
}
func easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels3(in *jlexer.Lexer, out *JsonInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "full_path":
			out.FullPath = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "query_params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.QueryParams = make(map[string]ParamInfo)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 ParamInfo
					(v3).UnmarshalEasyJSON(in)
					(out.QueryParams)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "request_body":
			if in.IsNull() {
				in.Skip()
				out.RequestBody = nil
			} else {
				if out.RequestBody == nil {
					out.RequestBody = new(SchemaInfo)
				}
				(*out.RequestBody).UnmarshalEasyJSON(in)
			}
		case "response_body":
			if in.IsNull() {
				in.Skip()
				out.ResponseBody = nil
			} else {
				if out.ResponseBody == nil {
					out.ResponseBody = new(SchemaInfo)
				}
				(*out.ResponseBody).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels3(out *jwriter.Writer, in JsonInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"full_path\":"
		out.RawString(prefix[1:])
		out.String(string(in.FullPath))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"query_params\":"
		out.RawString(prefix)
		if in.QueryParams == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.QueryParams {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				(v4Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"request_body\":"
		out.RawString(prefix)
		if in.RequestBody == nil {
			out.RawString("null")
		} else {
			(*in.RequestBody).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"response_body\":"
		out.RawString(prefix)
		if in.ResponseBody == nil {
			out.RawString("null")
		} else {
			(*in.ResponseBody).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JsonInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComHttpsWhoyanSwaggerExporterInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JsonInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComHttpsWhoyanSwaggerExporterInternalModels3(l, v)
}
